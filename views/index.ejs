<!DOCTYPE html>
<html lang="en" dir="ltr">
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this file,
   - You can obtain one at http://mozilla.org/MPL/2.0/.  -->
<head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">

  <script type="text/javascript" src="js/jquery.js"></script>
  <script type="text/javascript" src="js/underscore.js"></script>
  <script type="text/javascript" src="js/backbone.js"></script>
  <script type="text/javascript" src="js/d3.v2.js"></script>
  <script type="text/javascript">

  var allengines = null, topengines = null;
    $(document).ready(function() {
      topengines = new TopEngineList();
      var topenginesview = new TopEnginesView({collection:topengines});
      topengines.reset(<%- thetopengines %>);
      allengines = new EngineList();
      var usagelistview = new UsageListView({collection: new UsageList})
    });

    var Engine = Backbone.Model.extend({
      idAttribute: "_id",
      urlRoot : "/engines/id",
      displayName :  function() {
        return (this.get("name") + ((this.get("queryURLHTTPS"))? " [https]" : ""));
      },
      initialize : function() {
        
      },
      //color = d3.scale.category20(),
    });

    var EngineList = Backbone.Collection.extend({
      model      : Engine,
      url        : "/engines",
      comparator : function(engine) {
        return engine.get("used_count");
      },
      initialize : function() {
        this.bind("reset", this.recalculate, this);
        var el = this;
        this.fetch();
        this.colors = d3.scale.category20();
      },
      recalculate : function() {
        this.models.forEach(function(model, i) {
          model.set("color", this.colors(i));
        }.bind(this));
        this.median = d3.median(this.models, function(d) { return d.get("used_count"); });
      }
    });

    var TopEngineList = Backbone.Collection.extend({
      model      : Engine,
      comparator : function(engine) {
        return engine.get("used_count");
      },
      initialize : function() {
        this.bind("reset", this.recalculate, this);
        this.colors = d3.scale.category20();
      },
      recalculate : function() {
        this.models.forEach(function(model, i) {
          // grab all the engines with the same siteURL/ID
          var others = _.without(this.where({ siteURL : model.get("siteURL")}), model);
          // total up their values
          var used_count = others.reduce(function(total, item) { return total + item.get("used_count"); }, model.get("used_count"));
          // set one engine to be the total
          model.set("used_count",  used_count);
          // remove all the other duplicate engines from the collection
          this.remove(others);
          model.set("color", this.colors(i));
        }.bind(this));
        this.total = this.models.reduce(function(total, model) { return total + model.get("used_count"); }, 0);
        this.median = d3.median(this.models, function(d) { return d.get("used_count"); });
      }
    });


    var TopEnginesView = Backbone.View.extend({
      id : "TopEnginesPieChart",
      className : "top-engines-view",
      initialize: function() {
        this.collection.on('reset', this.render, this);
      },
      render: function() {

var w = 400,
    h = 400,
    relevant_data = d3.split(this.collection.models, function(d) { return d.get("used_count") <= this.median; }, this)[0],
    r = Math.min(w, h) / 2,
    labelr = r * .65, // radius for label anchor
    donut = d3.layout.pie(),
    arc = d3.svg.arc().innerRadius(r *0).outerRadius(r * .5);

    //relevant_data.pop();
var vis = d3.select("#pie")
    .append("svg:svg")
    .data([relevant_data])
    .attr("width", w + labelr)
    .attr("height", h);

var arcs = vis.selectAll("g.arc")
    .data(donut.value(function(d) { return d.get("used_count"); }))
    .enter().append("svg:g")
    .attr("class", "arc")
    .attr("transform", "translate(" + (r + 50) + "," + r + ")");

arcs.append("svg:path")
    .attr("fill", function(d, i) { return d.data.get("color"); })
    .attr("d", arc);

var total = this.collection.total;

arcs.append("svg:text")
    .attr("transform", function(d) {
        var c = arc.centroid(d),
            x = c[0],
            y = c[1],
            // pythagorean theorem for hypotenuse
            h = Math.sqrt(x*x + y*y);
        return "translate(" + (x/h * labelr * 1.10) +  ',' +
           (y/h * labelr * .9) +  ") rotate(" + labelr * .3 + ")";
    })
    .attr("dy", ".15em")
    .style("fill", "#fff")
    .style("font-weight", "bold")
    .style("font-size", "12px")
    .attr("text-anchor", function(d) {
        // are we past the center?
        return (d.endAngle + d.startAngle)/2 > Math.PI ?
            "end" : "start";
    })
    .text(function(d, i) { return d.data.displayName() + " " + Math.floor(d.data.get("used_count")/total*100) + "%"; });

    var last = this.collection.last(), nlast = this.collection.last(2)[0];

    //console.log("total", total, "last", last, "nlast", nlast)
    $("#most").text(last.displayName() + " is " + (Math.floor(last.get("used_count")/total * 100)) + "% of all search traffic");
    $("#nextmost").text(nlast.displayName() + " is " + (Math.floor(nlast.get("used_count")/total * 100)) + "%");

        return this;
      },
      events: { },
    });


    var Usage = Backbone.Model.extend({
      idAttribute: "_id",
      initialize : function() {
        this.set("added_ts", Date.parse(this.get("added")));
      }
    });

    var UsageList = Backbone.Collection.extend({
      model      : Usage,
      url        : "/usage",
      comparator : function(engine) {
        return engine.get("added_ts");
      },
      initialize : function() {
        this.fetch();
      }
    });

    var UsageListView = Backbone.View.extend({
      id : "usagelist",
      className : "usage-view",
      initialize: function() {
        this.collection.on('reset', this.render, this);
      },
      render: function() {

      var layers = {};
      this.collection.models.forEach(function(model) {
        var layer = layers[model.get("engine")];
        if (!layer) {
          layer = { "name" : model.get("engine"), values : [] };
        }
        layer.values.push({ x : model.get("added_ts") });
        [ model.get("added_ts"), model.get("engine") ];
      });
var data = d3.layout.stack()(layers),
    color = d3.interpolateRgb("#aad", "#556");

var margin = 20,
    width = 960,
    height = 500 - .5 - margin,
    mx = m,
    my = d3.max(data, function(d) {
      return d3.max(d, function(d) {
        return d.y0 + d.y;
      });
    }),
    mz = d3.max(data, function(d) {
      return d3.max(d, function(d) {
        return d.y;
      });
    }),
    x = function(d) { return d.x * width / mx; },
    y0 = function(d) { return height - d.y0 * height / my; },
    y1 = function(d) { return height - (d.y + d.y0) * height / my; },
    y2 = function(d) { return d.y * height / mz; }; // or `my` to not rescale

var vis = d3.select("#stackedbar-chart")
  .append("svg")
    .attr("width", width)
    .attr("height", height + margin);

var layers = vis.selectAll("g.layer")
    .data(data)
  .enter().append("g")
    .style("fill", function(d, i) { return color(i / (n - 1)); })
    .attr("class", "layer");

var bars = layers.selectAll("g.bar")
    .data(function(d) { return d; })
  .enter().append("g")
    .attr("class", "bar")
    .attr("transform", function(d) { return "translate(" + x(d) + ",0)"; });

bars.append("rect")
    .attr("width", x({x: .9}))
    .attr("x", 0)
    .attr("y", height)
    .attr("height", 0)
  .transition()
    .delay(function(d, i) { return i * 10; })
    .attr("y", y1)
    .attr("height", function(d) { return y0(d) - y1(d); });

var labels = vis.selectAll("text.label")
    .data(data[0])
  .enter().append("text")
    .attr("class", "label")
    .attr("x", x)
    .attr("y", height + 6)
    .attr("dx", x({x: .45}))
    .attr("dy", ".71em")
    .attr("text-anchor", "middle")
    .text(function(d, i) { return i; });

vis.append("line")
    .attr("x1", 0)
    .attr("x2", width - x({x: .1}))
    .attr("y1", height)
    .attr("y2", height);

function transitionGroup() {
  var group = d3.selectAll("#chart");

  group.select("#group")
      .attr("class", "first active");

  group.select("#stack")
      .attr("class", "last");

  group.selectAll("g.layer rect")
    .transition()
      .duration(500)
      .delay(function(d, i) { return (i % m) * 10; })
      .attr("x", function(d, i) { return x({x: .9 * ~~(i / m) / n}); })
      .attr("width", x({x: .9 / n}))
      .each("end", transitionEnd);

  function transitionEnd() {
    d3.select(this)
      .transition()
        .duration(500)
        .attr("y", function(d) { return height - y2(d); })
        .attr("height", y2);
  }
}

function transitionStack() {
  var stack = d3.select("#chart");

  stack.select("#group")
      .attr("class", "first");

  stack.select("#stack")
      .attr("class", "last active");

  stack.selectAll("g.layer rect")
    .transition()
      .duration(500)
      .delay(function(d, i) { return (i % m) * 10; })
      .attr("y", y1)
      .attr("height", function(d) { return y0(d) - y1(d); })
      .each("end", transitionEnd);

  function transitionEnd() {
    d3.select(this)
      .transition()
        .duration(500)
        .attr("x", 0)
        .attr("width", x({x: .9}));
  }
}


        return this;
      },
      events: { },
    });

  </script>

  <link href="css/bootstrap.css" rel="stylesheet">
  <link href="css/bootstrap-responsive.css" rel="stylesheet">
  <link href="css/page.css" rel="stylesheet">

</head>
<body>
  <div id="page">
    <div id="title">
      <!--<input id="search" type="search" value="Awesome Search" class="input-xxlarge"/>-->
      <h1>Awesome Search</h1>
      <div class="orange">~ Search add-on for Firefox ~</div>
    </div>
    <section>
      <h2>Most Used Search Engines</h2>
      <div id="pie"></div>
      <h4 id="most"></h4>
      <h4 id="nextmost"></h4>
    </section>
    <section>
      <div id="stackedbar-chart"></div>
    </section>
  </div>
</body>
</html>
